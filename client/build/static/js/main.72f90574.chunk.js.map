{"version":3,"sources":["actions/index.js","actions/actions.js","components/Header.js","components/Login.js","components/Home.js","components/PageOne.js","components/PageTwo.js","App.js","serviceWorker.js","reducers/authReducer.js","reducers/index.js","reducers/homeReducer.js","reducers/geoReducer.js","reducers/aggReducer.js","index.js"],"names":["logoutUser","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","dispatch","response","wrap","_context2","prev","next","axios","get","sent","type","payload","stop","this","_x2","apply","arguments","Header","auth","isAuthenticated","react_default","createElement","id","className","Link","to","onClick","props","react","renderNav","Component","connect","_ref","Login","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","login","_this$state","state","username","password","loginUser","handleChange","prop","event","setState","defineProperty","target","value","Redirect","components_Header","onChange","placeholder","_callee","user","_context","post","_x","Home","fetchActivityCount","fetchRegionCount","fetchSectorCount","fetchCountryCount","data","labelName","color","renderData","length","colors","values","labels","i","tmp","push","datasets","label","backgroundColor","concat","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","_this$props","home","react_chartjs_2_es","createChartData","height","no","_ref7","_callee7","activityCount","_context7","withCredentials","_x7","_ref4","_callee4","countryCount","_context4","_x4","_ref6","_callee6","regionCount","_context6","_x6","_ref5","_callee5","sectorCount","_context5","_x5","PageOne","fetchCountryAverage","fetchSectorAverage","cat","keys","bgColors","aggregate","aggdata","sdata","sum","reduce","p","n","subLabels","j","dataset","parseInt","toFixed","mainCategory","options","scales","xAxes","stacked","ticks","callback","index","yAxes","console","log","parseFloat","agg","createChartDataNew","fetchCountrySectorAgg","_ref9","_callee9","csagg","_context9","_x9","fetchSectorActivityAgg","_ref10","_callee10","s_agg","_context10","_x10","_ref11","_callee11","sector","_context11","_x11","_ref12","_callee12","_context12","_x12","PageTwo","fetchCountrySum","temp","country","count","geo","index_esm","chartType","mapsApiKey","rootProps","data-testid","_ref8","_callee8","countrySum","_context8","_x8","App","fetchUser","BrowserRouter","Switch","Route","exact","key","path","component","_ref3","_callee3","_context3","_x3","Boolean","window","location","hostname","match","initialState","appReducer","combineReducers","undefined","action","newState","err","objectSpread","region","activity","sagg","rootReducer","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72f90574.chunk.js","sourcesContent":["import axios from 'axios';\nimport { LOGIN_USER, LOGOUT_USER, FETCH_USER, FETCH_COUNTRY_COUNT, FETCH_SECTOR_COUNT, FETCH_REGION_COUNT, FETCH_ACTIVITY_COUNT, FETCH_COUNTRY_SUM, FETCH_COUNTRY_SECTOR_AGG, FETCH_SECTOR_ACTIVITY_AGG, FETCH_SECTOR_AVG, FETCH_COUNTRY_AVG } from './actions';\n\n\n/**\n * This file contains the api calls to the backend according to page\n * Once the call is success it dispatches an an action for reducer \n * to update the respective state\n */\n\n// login user\nexport const loginUser=(username,password)=>{\n    return async (dispatch)=>{\n        const user = await axios.post('/login',{username,password});\n        dispatch({type:LOGIN_USER,payload:user});\n    }\n}\n\n// logout user\nexport const logoutUser=()=>{\n    return async (dispatch)=>{\n        const response = await axios.get('/logout');\n        dispatch({type:LOGOUT_USER,payload:response});\n    }\n}\n\n// get logged in user\nexport const fetchUser=()=>{\n    return async (dispatch)=>{\n        const user = await axios.get('/user/current',{withCredentials:true});\n        dispatch({type:FETCH_USER,payload:user});\n    }\n}\n\n// get count according to country\nexport const fetchCountryCount=(no)=>{\n    return async (dispatch)=>{\n        const countryCount = await axios.get(`/analytics/total/country/${no}`,{withCredentials:true});\n        dispatch({type:FETCH_COUNTRY_COUNT,payload:countryCount});\n    }\n}\n\n// get count according to sector\nexport const fetchSectorCount=(no)=>{\n    return async (dispatch)=>{\n        const sectorCount = await axios.get(`/analytics/total/sector/${no}`,{withCredentials:true});\n        dispatch({type:FETCH_SECTOR_COUNT,payload:sectorCount});\n    }\n}\n\n\n// get count according to region\nexport const fetchRegionCount=(no)=>{\n    return async (dispatch)=>{\n        const regionCount = await axios.get(`/analytics/total/region/${no}`,{withCredentials:true});\n        dispatch({type:FETCH_REGION_COUNT,payload:regionCount});\n    }\n}\n\n\n// get count according to activity\nexport const fetchActivityCount=(no)=>{\n    return async (dispatch)=>{\n        const activityCount = await axios.get(`/analytics/total/activity/${no}`,{withCredentials:true});\n        dispatch({type:FETCH_ACTIVITY_COUNT,payload:activityCount});\n    }\n}\n\n// get the total loan amount for each country\nexport const fetchCountrySum=()=>{\n    return async (dispatch)=>{\n        const countrySum = await axios.get(`/analytics/country/sum`,{withCredentials:true});\n        dispatch({type:FETCH_COUNTRY_SUM,payload:countrySum});\n    }\n}\n\n// get the country/sector aggregate\nexport const fetchCountrySectorAgg=(no)=>{\n    return async (dispatch)=>{\n        const csagg = await axios.get(`/analytics/agg/country/sector/${no}`,{withCredentials:true});\n        dispatch({type:FETCH_COUNTRY_SECTOR_AGG,payload:csagg});\n    }\n}\n\n// get the sector/activity aggregate\nexport const fetchSectorActivityAgg=(no)=>{\n    return async (dispatch)=>{\n        const s_agg = await axios.get(`/analytics/agg/sector/activity/${no}`,{withCredentials:true});\n        dispatch({type:FETCH_SECTOR_ACTIVITY_AGG,payload:s_agg});\n    }\n}\n\n// get the average loan amount across sectors\nexport const fetchSectorAverage = (no)=>{\n    return async (dispatch)=>{\n        const sector = await axios.get(`/analytics/agg/loan_amount/sector/${no}`,{withCredentials:true});\n        dispatch({type:FETCH_SECTOR_AVG,payload:sector});\n    }\n}\n\n// get the average loan amount across countries\nexport const fetchCountryAverage = (no)=>{\n    return async (dispatch)=>{\n        const sector = await axios.get(`/analytics/agg/loan_amount/country/${no}`,{withCredentials:true});\n        dispatch({type:FETCH_COUNTRY_AVG,payload:sector});\n    }\n}","/**\n * Exports all the constant values for reducers\n */\nexport const LOGIN_USER = 'login_user';\nexport const FETCH_USER = 'fetch_user';\nexport const LOGOUT_USER = 'logout_user';\nexport const FETCH_SECTOR_COUNT = 'fetch_sector_count';\nexport const FETCH_REGION_COUNT = 'fetch_region_count';\nexport const FETCH_COUNTRY_COUNT = 'fetch_country_count';\nexport const FETCH_ACTIVITY_COUNT = 'fetch_activity_count';\nexport const FETCH_COUNTRY_SUM = 'fetch_country_sum';\nexport const FETCH_SECTOR_ACTIVITY_AGG= 'fetch_sector_activity_agg';\nexport const FETCH_COUNTRY_SECTOR_AGG = 'fetch_country_sector_agg';\nexport const FETCH_SECTOR_AVG= 'fetch_sector_avg';\nexport const FETCH_COUNTRY_AVG = 'fetch_country_avg';\n\n","import React,{Component,Fragment} from 'react';\nimport {connect} from 'react-redux';\nimport {Link} from 'react-router-dom';\nimport {logoutUser} from '../actions';\n\n/**\n * This class renders the common header component in all the pages\n */\nclass Header extends Component{\n\n    renderNav(auth){\n        if(auth && auth.isAuthenticated){\n            return(\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down \">\n                    <li><Link to=\"/page/one\">Agrregation</Link></li>\n                    <li><Link to=\"/page/two\">Geo</Link></li>\n                    <li><button id=\"logout-button\" className=\"waves-effect waves-light btn-flat\" \n                    onClick={this.props.logoutUser}>Logout</button></li>\n                </ul>\n            );\n        }\n        return(<Fragment></Fragment>)\n    }\n\n    render(){\n        return(\n        <div className=\"navbar-fixed\">    \n            <nav className=\"header-nav\">\n                <div className=\"nav-wrapper\">\n                    <Link to=\"/home\" className=\"main-logo brand-logo\">Kiva</Link>                \n                        {this.renderNav(this.props.auth)}\n                </div>\n            </nav>\n        </div>    \n        );\n    }\n}\n\nfunction mapStateToProps({auth}){\n    return {auth};\n}\n\n\nexport default connect(mapStateToProps,{logoutUser})(Header);","import React,{Component} from 'react';\nimport {loginUser} from '.././actions';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\nimport Header from './Header';\n\n/**\n * This class contains the login component , \n * based on the auth value the user is logged in / logged out \n */\n\nclass Login extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            username:'',\n            password:''\n        }\n    }\n    // call login \n    login=()=>{\n        const {username,password} = this.state;\n        if(username!=='' && password!==''){\n            this.props.loginUser(username,password);\n        }\n    }\n    // form event change\n    handleChange=(prop)=>(event)=>{\n        this.setState({[prop]:event.target.value});\n    }\n\n    render(){\n        const {auth} = this.props;\n        return(\n            <div>\n                {auth && auth.isAuthenticated &&\n                (<Redirect to='/home'/>)}\n                <Header />\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div id=\"loginForm\" className=\"col s6 offset-s3 card\">\n                            <h4 className=\"center\">Login</h4>\n                            <div className=\"input-field col s12\">\n                                <input type='text' id='username' value={this.state.username}\n                                onChange={this.handleChange('username')} placeholder='Username'/>\n                            </div>\n                            <div className=\"input-field col s12\">\n                                <input type='password' id='password' value={this.state.password}\n                                    onChange={this.handleChange('password')} placeholder='Password'/>\n                            </div>        \n                            <div className=\"input-field col s12\">\n                                <button className=\"waves-effect waves-light btn\" \n                                onClick={this.login}>Login</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n        )\n    }\n}\n\nfunction mapStateToProps({auth}){\n    return {auth};\n}\n\nexport default connect(mapStateToProps,{loginUser})(Login);","import React,{Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\nimport {logoutUser,fetchActivityCount,fetchCountryCount,\n    fetchRegionCount,fetchSectorCount} from '../actions';\nimport Header from './Header';\nimport {Line,Bar,Doughnut} from 'react-chartjs-2';\n\n/**\n * This class is the landing page once the user logs in\n */\nclass Home extends Component{\n\n    componentDidMount(){\n        // fetching the graph data once component has loaded\n        this.props.fetchActivityCount(10);\n        this.props.fetchRegionCount(10);\n        this.props.fetchSectorCount(10);\n        this.props.fetchCountryCount(10);\n    }\n    // this method modifies the data in accordance to chartjs needs\n    // common method for all charts , only labelName is changed\n    createChartData(data,labelName,color){\n        let renderData = {};\n        // check ig data exists and has the labelName property\n        if(data && data[labelName] \n            && data[labelName].length>0){\n                // color values for the chart\n                const colors=['rgba(255,99,132,','rgba(140, 234, 110,',\n                            'rgba(228, 90, 68,','rgba(56, 187, 156,'];\n                \n                let values=[],labels=[];\n                // loop and separte the labels and data\n                for(let i=0;i<data[labelName].length;i++){\n                    let tmp = Object.values(data[labelName][i]);\n                    labels.push(tmp[0]);\n                    values.push(tmp[1]);\n                }\n                \n            renderData['labels'] = labels;\n            const datasets=[\n                {\n                  label: labelName,\n                  backgroundColor: `${colors[color]}0.5)`,\n                  borderColor: `${colors[color]}1)`,\n                  borderWidth: 1,\n                  hoverBackgroundColor: `${colors[color]}0.7)`,\n                  hoverBorderColor: `${colors[color]}1)`,\n                  data: values\n                }];\n            // making dougnut colorful      \n            if(labelName==='country'){\n                const bgColors=['rgba(56, 187, 156,0.8)','rgba(243,220,97,0.8)','rgba(243,146,97,0.8)',\n                                'rgba(234,107,141,0.8)','rgba(140, 234, 110,0.5)','rgba(67, 229, 249,0.7)',\n                                'rgba(243,97,97,0.8)','rgba(168, 228, 218,0.8)','rgba(228, 90, 68,0.7)',\n                                'rgba(101,97,243,0.8)'];\n                datasets[0]['backgroundColor']=bgColors;\n            }\n            renderData['datasets']=datasets;\n        }\n        return renderData;\n    }\n\n    render(){\n        const {auth,home} = this.props;\n                \n        return(\n            <div>\n                {(!auth || !auth.isAuthenticated) &&\n                (<Redirect to='/'/>)}\n                <Header />\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col s6 card\">\n                            <h4>Top Sectors</h4>\n                            <Line data={this.createChartData(home,'sector',0)} height={250}/>\n                        </div>\n                        <div className=\"col s6 card\">\n                            <h4>Top Activity</h4>\n                            <Bar data={this.createChartData(home,'activity',1)} height={250}/>\n                        </div>\n                        <div className=\"col s6 card\">\n                            <h4>Top Countries</h4>\n                            <Doughnut data={this.createChartData(home,'country',2)} height={250}/>\n                        </div>\n                        <div className=\"col s6 card\">\n                            <h4>Top Regions</h4>\n                            <Bar data={this.createChartData(home,'region',3)} height={250}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps({auth,home}){\n    return {auth,home};\n}\n\nexport default connect(mapStateToProps,{logoutUser,fetchActivityCount,fetchCountryCount,\n    fetchRegionCount,fetchSectorCount})(Home);","import React,{Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\nimport {logoutUser,fetchCountrySectorAgg,fetchSectorActivityAgg,\n    fetchCountryAverage,fetchSectorAverage} from '../actions';\nimport Header from './Header';\nimport {Bar,Line} from 'react-chartjs-2';\n\n/** This class displayes two stacked bar graphs\n * \n */\nclass PageOne extends Component{\n\n    componentDidMount(){\n        // get sector/activity and country/sector aggregations\n       // this.props.fetchCountrySectorAgg(10);\n       // this.props.fetchSectorActivityAgg(10);\n        this.props.fetchCountryAverage(10);\n        this.props.fetchSectorAverage(10);\n    }\n\n    createChartData(data,cat){\n        let renderData={};\n        // data is redux state containing two agg values csagg,sagg\n        // checking if data exists and contains category and the category is not empty\n        // agg:{sagg:{data:......}}\n        if(data && data[cat] && Object.keys(data[cat]).length>0){\n            // array of colors to choose from \n            const bgColors=['rgba(56, 187, 156,0.8)','rgba(243,220,97,0.8)','rgba(243,146,97,0.8)',\n                            'rgba(234,107,141,0.8)','rgba(140, 234, 110,0.5)','rgba(67, 229, 249,0.7)',\n                            'rgba(243,97,97,0.8)','rgba(168, 228, 218,0.8)','rgba(228, 90, 68,0.7)',\n                            'rgba(101,97,243,0.8)','rgba(56, 187, 156,0.8)','rgba(243,220,97,0.8)','rgba(243,146,97,0.8)',\n                            'rgba(234,107,141,0.8)','rgba(140, 234, 110,0.5)','rgba(67, 229, 249,0.7)',\n                            'rgba(243,97,97,0.8)','rgba(168, 228, 218,0.8)','rgba(228, 90, 68,0.7)',\n                            'rgba(101,97,243,0.8)'];\n\n            // get the aggregate sagg/csagg\n            let aggregate = data[cat];\n            \n            // datasets array for storing stacked charts\n            let datasets = [];\n            // get the no of keys in sagg/agg 's data field to iterate and\n            // calculate percents\n            let aggdata = Object.keys(aggregate.data);\n            for(let i=0;i<aggdata.length;i++){\n                // get the data from i'th key of sagg/csagg's data\n                // will be used to calculate %\n                let sdata = Object.values(aggregate.data[aggdata[i]]);\n                // get the sum of the array\n                let sum = sdata.reduce((p,n)=>p+n,0);\n                // get the keys these will be the labels for each bar\n                let subLabels = Object.keys(aggregate.data[aggdata[i]]);\n\n                for(let j=0;j<sdata.length;j++){\n                    // individual bar dataset object\n                    let dataset ={};\n                    dataset[\"label\"] = subLabels[j];\n                    dataset[\"data\"] = [(((parseInt(sdata[j],10)/sum).toFixed(2))*120).toFixed(1)];\n                    dataset[\"backgroundColor\"] = bgColors[j];\n                    dataset[\"stack\"]= aggregate.mainCategory[i];\n                    datasets.push(dataset);\n                }\n            }\n            renderData[\"datasets\"] = datasets;\n            //renderData[\"labels\"]=aggregate.mainCategory.map((e,i)=>i);\n        }\n        \n        return renderData;\n    }\n\n    // These options allow chart js to stack charts\n    barChartOptions(data,cat){\n        let options ={};\n        if(data && data[cat] && Object.keys(data[cat]).length>0){\n          options= {\n              scales: {\n                xAxes: [{\n                  stacked: true,\n                  ticks:{\n                      callback:function(value,index,values){\n                        return value;\n                      }\n                  }\n               }],\n                yAxes: [{\n                     stacked: true,\n                     \n                  }]\n              }\n            };\n        }\n        return options;\n    }\n\n    createChartDataNew(data,labelName,color){\n        let renderData = {};\n        console.log(data);\n\n        // check ig data exists and has the labelName property\n        if(data && data[labelName] \n            && data[labelName].data.length>0){\n                console.log(data);\n                // color values for the chart\n                const colors=['rgba(255,99,132,','rgba(140, 234, 110,',\n                            'rgba(228, 90, 68,','rgba(56, 187, 156,'];\n                \n                let values=[],labels=[];\n                // loop and separte the labels and data\n                for(let i=0;i<data[labelName].data.length;i++){\n                    let tmp = Object.values(data[labelName].data[i]);\n                    labels.push(tmp[0]);\n                    values.push(parseFloat(tmp[1]).toFixed(2));\n                }\n                \n            renderData['labels'] = labels;\n            const datasets=[\n                {\n                  label: labelName,\n                  backgroundColor: `${colors[color]}0.5)`,\n                  borderColor: `${colors[color]}1)`,\n                  borderWidth: 1,\n                  hoverBackgroundColor: `${colors[color]}0.7)`,\n                  hoverBorderColor: `${colors[color]}1)`,\n                  data: values\n                }];\n            \n            renderData['datasets']=datasets;\n        }\n        return renderData;\n    }\n\n    render(){\n        const {auth,agg} = this.props;\n    \n        return(\n            <div>\n                {(!auth || !auth.isAuthenticated) &&\n                (<Redirect to='/'/>)}\n                <Header />\n                <div className=\"container\">\n                   <div className=\"row\">\n                        {/* <div className=\"col s12\">\n                            <h3>Distribution of Activities across Sectors</h3>\n                            <Bar data={this.createChartData(agg,'sagg')}\n                            options={this.barChartOptions(agg,'sagg')}\n                            height={250} />\n                        </div>\n                        <div className=\"col s12\">\n                            <h3>Distribution of Sectors across Countries</h3>\n                            <Bar data={this.createChartData(agg,'sagg')} \n                            options={this.barChartOptions(agg,'sagg')}\n                            height={250}/>\n                        </div> */}\n\n                        <div className=\"col s12\">\n                            <h3>Average Loan Amount Across Sectors</h3>\n                            <Bar data={this.createChartDataNew(agg,'sector',1)} height={250}/>\n                        </div>\n                        <div className=\"col s12\">\n                            <h3>Average Loan Amount Across Countries</h3>\n                            <Line data={this.createChartDataNew(agg,'country',3)} height={250}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps({auth,agg}){\n    return {auth,agg};\n}\n\nexport default connect(mapStateToProps,{logoutUser,\n    fetchCountrySectorAgg,fetchSectorActivityAgg,fetchSectorAverage,\n    fetchCountryAverage})(PageOne);","import React,{Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\nimport {logoutUser,fetchCountrySum} from '../actions';\nimport Header from './Header';\nimport {Chart} from 'react-google-charts';\n\n/**\n * This class displays a geo chart inside the application\n */\nclass PageTwo extends Component{\n\n    componentDidMount(){\n        // getting a country->total loan amount combo\n        this.props.fetchCountrySum();\n    }    \n\n    createChartData(data){\n        // defaullt headers for google charts\n        let renderData=[[\"Country\",\"Total Loan Value(USD)\"]];\n        \n        if(data && data.sum && data.sum.length>0){\n            const {sum} = data; \n            for(let i=0;i<sum.length;i++){\n                let temp =[];\n                temp.push(sum[i].country);\n                temp.push(sum[i].count);\n                renderData.push(temp);\n            }\n        }\n        return renderData;\n    }\n\n    render(){\n        const {auth,geo} = this.props;\n        return(\n            <div>\n                {(!auth || !auth.isAuthenticated) &&\n                (<Redirect to='/'/>)}\n                <Header />\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col s12\">\n                            <h4>Total Loans given in a Country</h4>\n                            <Chart\n                                chartType=\"GeoChart\"\n                                data={this.createChartData(geo)}\n                                mapsApiKey=\"AIzaSyDYjXmUwL6crbuft4eGaG8Er754uYKrpiY\"\n                                rootProps={{ 'data-testid': '1' }}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps({auth,geo}){\n    return {auth,geo};\n}\n\nexport default connect(mapStateToProps,{logoutUser,fetchCountrySum})(PageTwo);","import 'materialize-css/dist/css/materialize.min.css'\nimport React, { Component } from 'react';\nimport './App.css';\nimport {BrowserRouter,Route,Switch} from 'react-router-dom';\nimport Login from './components/Login';\nimport Home from './components/Home';\nimport PageOne from './components/PageOne';\nimport PageTwo from './components/PageTwo';\nimport {connect} from 'react-redux';\nimport {fetchUser} from './actions';\n\n/**\n * This class is the root of the application all routes are defind here\n */\nclass App extends Component {\n  // checking if user is already logged in with current_user api once the app loads\n  componentDidMount(){\n    this.props.fetchUser();\n  }\n\n  render() {\n    // frontend routing amongst components\n    return (\n      <BrowserRouter>\n        <Switch>\n            <Route exact key=\"0\" path=\"/\" component={Login}/>\n            <Route exact key=\"1\" path=\"/home\" component={Home}/>\n            <Route exact key=\"2\" path=\"/page/one\" component={PageOne}/>\n            <Route exact key=\"3\" path=\"/page/two\" component={PageTwo}/>\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n// getting redux state to map to props\nfunction mapStateToProps(state){\n  return state;\n}\n// wiring up the react and redux state\nexport default connect(mapStateToProps,{fetchUser})(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { LOGIN_USER, LOGOUT_USER, FETCH_USER } from \"../actions/actions\";\n\n/**\n * Reducer responsible for authentication\n */\n\nconst initialState={\n    isAuthenticated:false\n}\n\nexport default function(state=initialState,action){\n    let  newState={};\n    switch (action.type) {\n        case LOGIN_USER:\n            let {data} = action.payload;\n            newState[\"isAuthenticated\"] = data.err?false:true;\n            newState = {...newState,data};\n            return newState;    \n        case LOGOUT_USER:\n            newState[\"isAuthenticated\"] = false;\n            return newState;\n        case FETCH_USER:\n            data = action.payload.data;\n            newState[\"isAuthenticated\"] = data.err?false:true;\n            return newState;\n        default:\n            return state;\n    }\n}","import {combineReducers} from 'redux';\nimport { LOGOUT_USER } from '../actions/actions';\nimport authReducer from './authReducer';\nimport homeReducer from './homeReducer';\nimport geoReducer from './geoReducer';\nimport aggReducer from './aggReducer';\n\n/**\n * This file contains the combination  of all reducers inside the application\n */\nconst appReducer = combineReducers({\n    auth:authReducer,\n    home:homeReducer,\n    geo:geoReducer,\n    agg:aggReducer\n});\n\n// root reducer changes the state of app to undefined incase of logout\nconst rootReducer = (state,action)=>{\n    if(action.type===LOGOUT_USER){\n        state = undefined;\n    }\n    return appReducer(state,action);\n}\n\nexport default rootReducer;","import { FETCH_REGION_COUNT, FETCH_ACTIVITY_COUNT, FETCH_COUNTRY_COUNT, FETCH_SECTOR_COUNT } from \"../actions/actions\";\n\n/** \n * Reducer for the home page\n*/\n\nexport default function(state={},action){\n    let  newState={};\n    switch (action.type) {\n        case FETCH_REGION_COUNT:\n            let {data:region} = action.payload.data;\n            newState = {...state,region};\n            return newState;    \n        case FETCH_ACTIVITY_COUNT:\n            let {data:activity} = action.payload.data;\n            newState = {...state,activity};\n            return newState;        \n        case FETCH_COUNTRY_COUNT:\n            let {data:country} = action.payload.data;\n            newState = {...state,country};        \n            return newState;\n        case FETCH_SECTOR_COUNT:\n            let {data:sector} = action.payload.data;\n            newState = {...state,sector};\n            return newState;\n        default:\n            return state;\n    }\n}","import { FETCH_COUNTRY_SUM } from \"../actions/actions\";\n\n\n/** \n * Reducer for pageTwo geo chart\n*/\n\nexport default function(state={},action){\n    let  newState={};\n    switch (action.type) {\n        case FETCH_COUNTRY_SUM:\n            let {data:sum} = action.payload.data;\n            newState = {...state,sum};\n            return newState;    \n        default:\n            return state;\n    }\n}","import { FETCH_COUNTRY_SECTOR_AGG, FETCH_SECTOR_ACTIVITY_AGG, FETCH_SECTOR_AVG, FETCH_COUNTRY_AVG } from \"../actions/actions\";\n\n/**\n * Reducer for page one Aggregate queries\n */\n\nexport default function(state={},action){\n    let  newState={};\n    switch (action.type) {\n        case FETCH_COUNTRY_SECTOR_AGG:\n            let {data:csagg} = action.payload;\n            newState = {...state,csagg};\n            return newState;    \n        case FETCH_SECTOR_ACTIVITY_AGG:\n            let {data:sagg} = action.payload;\n            newState = {...state,sagg};\n            return newState;  \n        case FETCH_SECTOR_AVG:\n            let {data:sector} = action.payload;\n            newState = {...state,sector};\n            return newState;  \n        case FETCH_COUNTRY_AVG:\n            let {data:country} = action.payload;\n            newState = {...state,country};\n            return newState;        \n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport reduxThunk from 'redux-thunk';\nimport reducers from './reducers';\nimport {applyMiddleware,createStore,compose} from 'redux';\nimport logger from 'redux-logger';\n\n\n// create a redux store to save state\n//const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducers,{},applyMiddleware(reduxThunk));\n//const store = createStore(reducers,{},composeEnhancers(applyMiddleware(reduxThunk,logger)));\n\n\nReactDOM.render(\n            <Provider store={store}>\n                <App />\n            </Provider>    , \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}